How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It really helped me save alot of time finding out typos or mistakes. If I had to manually find that single peice of typo, it might have wasted so much of my time and energy.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Ok, I am gonna answer this programming wise. It could help get me an idea of how a block of code or functionality has gone from phase to phase. I can pin point changes or might even get an idea of why I did a change if the change was too old and I couldn't remember it.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Manual might be better if I am working in collaboration with a group of people or team. Automatically saving every persons code could create confusions at a point. Automatically saving could save time and save the code even if they forget to manually save them. 

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Honestly, I have no clue why. But there must be a reason why!

How can you use the commands git log and git diff to view the history of files?

    I can first use git log to see the history of changes made over time and then use git diff to check the actual changes between different commits.

How might using version control make you more confident to make changes that
could break something?

    Since I now know that I can always revert back to a version that was working, I can easily experiment different algorithms or coding styles with confidence.

Now that you have your workspace set up, what do you want to try using Git for?

    I will try making a next repository and experiment around by creating a new small app.